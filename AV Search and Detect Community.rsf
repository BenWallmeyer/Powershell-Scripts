{"Script":{"MonScriptCategoryI3D":13,"Name":"AV Search and Detect Community","ScriptKind":0,"ScriptType":0,"Script":"<######################################################################\r\n#                                                                     #\r\n#                                                                     #\r\n#                                                                     #\r\n#   Herausgeber: Wallmeyer & Wallmeyer GbR                            #\r\n#   Website: https://www.coswa.de                                     #\r\n#   Telefon: 05921-3083753                                            #\r\n#   E-Mail: info@coswa.de                                             #\r\n#                                                                     #\r\n#                                                                     #\r\n#                                                                     #\r\n#                                                                     #\r\n#######################################################################>\r\n#\r\n# Parameter für manuelle Tests (\"<\" am Anfang entfernen)\r\n<#\r\n$detect =\"Kaspersky\" #Searchstring\r\n$detectAction = 2 # 1 = Fehler 2 = Warnung\r\n#>\r\n\r\n\r\n$script_name = \"AV Search and Detect Community\"\r\n$script_version = \"1.0\"\r\n$script_cr = \"Wallmeyer & Wallmeyer GbR\"\r\n$scriptstand = \"23.03.2022 - 10:43 Uhr\"\r\n\r\n\r\n\r\n\r\n######################## Feste Parameter ###########################\r\n$ErrorActionPreference = \"stop\"\r\n$wrapzeichen = 90 # Automatischer Zeilenumbruch nach x Zeichen\r\n[int32]$fehler = 0\r\n[string]$global:ausgabe = \"\"\r\n[string]$global:Fehlerausgabe = \"\"\r\n$computer = $env:COMPUTERNAME\r\n\r\n######################## Variable Parameter ###########################\r\n\r\n######################### IMPORT der benötigten Module########################\r\n\r\n######################### Funktionen für die Ausgabe #########################\r\nfunction snormal {\r\n    param ($vt, [int]$AnzAbsatz = 1)\r\n    if (!$global:ausgabe) {\r\n        $global:ausgabe += \"######### Erfolgreiche Job Informationen ######### `n`n\"\r\n    }\r\n\r\n    $global:ausgabe += (\"$vt \" + (\"`n\" * $AnzAbsatz))\r\n}\r\n\r\nfunction sfehler {\r\n    param ($vt, [int]$AnzAbsatz = 1)\r\n    if (!$global:Fehlerausgabe) {\r\n        $global:Fehlerausgabe += \"######### Fehler und Warnung Informationen ######### `n`n\"\r\n    }\r\n\r\n    $global:Fehlerausgabe += (\"$vt \" + (\"`n\" * $AnzAbsatz))\r\n    $global:fehler ++\r\n}\r\n\r\n\r\nFunction Concat {\r\n    Param ([switch]$Newlines, $Wrap, $Begin = '', $End = '', $Join = '')\r\n    Begin {\r\n        if ($Newlines) {\r\n            $Join = [System.Environment]::NewLine\r\n        }\r\n        $output = New-Object System.Text.StringBuilder\r\n        $deliniate = $False\r\n\r\n        if (!$Wrap) {\r\n            $output.Append($Begin) | Out-Null\r\n        }\r\n        elseif ($Wrap -is [string]) {\r\n            $output.Append(($End = $Wrap)) | Out-Null\r\n        }\r\n        else {\r\n            $output.Append($Wrap[0]) | Out-Null\r\n            $End = $Wrap[1]\r\n        }\r\n    }\r\n    Process {\r\n        if (!($_ = [string]$_).length) {\r\n        }\r\n        elseif ($deliniate) {\r\n            $output.Append($deliniate) | Out-Null\r\n            $output.Append($_) | Out-Null\r\n        }\r\n        else {\r\n            $deliniate = $Join\r\n            $output.Append($_) | Out-Null\r\n        }\r\n    }\r\n    End {\r\n        $output.Append($End).ToString()\r\n    }\r\n}\r\n\r\n$_WRAP = @{'' = \"`$1$([System.Environment]::NewLine)\" }\r\nFunction _Wrap {\r\n    Param ($Length, $Step, $Force)\r\n\r\n    $wrap = $Force -join '' -replace '\\\\|]|-', '\\$0'\r\n    $chars = \"^\\n\\r$wrap\"\r\n    $preExtra = \"[$chars\\S]*\"\r\n    $postExtra = \"[^\\s$wrap]\"\r\n\r\n    $chars = \"[$chars]\"\r\n    $postChars = \"$preExtra$postExtra\"\r\n    if ($wrap) {\r\n        $wrap = \"[$wrap]\"\r\n        $wrap\r\n        $wrap = \"$wrap(?=\\S)\"\r\n        $chars = \"$chars|$wrap\"\r\n        $postChars = \"$postChars|$preExtra$wrap\"\r\n    }\r\n\r\n    for (\r\n        ($extra = 0), ($next = $NULL), ($prev = $NULL);\r\n        ($next = $Length - $Step) -gt 0 -and ($prev = $extra + $Step);\r\n        ($Length = $next), ($extra = $prev)\r\n    ) {\r\n        \"(?:$chars){$next,$Length}(?=(?:$postChars){$extra,$prev})\"\r\n    }\r\n}\r\n\r\nFunction Wrap {\r\n    Param (\r\n        [int]$Length = 80,\r\n        [int]$Step = 5,\r\n        [char[]]$Force,\r\n        [parameter(Position = 0)][string]$Text\r\n    )\r\n    $key = \"$Length $Step $Force\"\r\n    $wrap = $_WRAP[$key]\r\n    if (!$wrap) {\r\n        $wrap = $_WRAP[$key] = _Wrap `\r\n            -Length $Length `\r\n            -Step $Step `\r\n            -Force ($Force -join '') `\r\n        | Concat -Join '|' -Wrap '(', ')(?:[^\\n\\r\\S])+'\r\n    }\r\n    return $Text -replace $wrap, $_WRAP['']\r\n}\r\n\r\n$global:errorcode = 0\r\n$global:exitvalue = 0\r\nfunction serrorcode ($errorcode_new) {\r\n    if ($global:errorcode -eq 1) {\r\n        return $global:errorcode\r\n    }\r\n    else {\r\n\r\n        if ($errorcode_new -eq $global:errorcode -and $global:errorcode -eq 0) {\r\n        }\r\n        elseif ($errorcode_new -eq 1) {\r\n            $global:errorcode = $errorcode_new\r\n        }\r\n        elseif ($errorcode_new -eq 2) {\r\n            $global:errorcode = $errorcode_new        \r\n        }\r\n        elseif ($errorcode_new -eq 3 -and $global:errorcode -lt 2) {\r\n            $global:errorcode = $errorcode_new        \r\n        }\r\n\r\n        return $global:errorcode\r\n    }\r\n}\r\n\r\nfunction sresult() {\r\n    if ($global:errorcode -eq 1) {\r\n        $resultstring = \"Notfall9999 - Der Status ist nicht optimal!\"\r\n        $global:exitvalue = 1001 \r\n    }\r\n    elseif ($global:errorcode -eq 2) {\r\n        $resultstring = \"Mittel8888 - Der Status ist nicht optimal!\"\r\n        $global:exitvalue = 1002         \r\n    }\r\n    elseif ($global:errorcode -eq 3) {\r\n        $resultstring = \"Info7777 - Der Status ist nicht optimal!\"\r\n        $global:exitvalue = 1002\r\n    }\r\n    elseif ($global:errorcode -eq 0) {\r\n        $resultstring = \"OK - Der Status ist optimal.\"\r\n        $global:exitvalue = 0\r\n    }\r\n    return $resultstring\r\n}\r\n\r\n######################### Skript #########################\r\nsnormal \"`n`n\"\r\nsnormal \"############################# Version Informationen #############################\"\r\nsnormal \"$script_name\"\r\nsnormal \"Skriptstand: $scriptstand\"\r\nsnormal \"Version: $script_version\"\r\nsnormal \"Copyright: $script_cr\"\r\n \r\n    $fehler = 0\r\n    serrorcode 0 | Out-Null\r\n\r\n\r\n   \r\n    $SearchTerm = \"*\"+$detect+\"*\"\r\n    $wmiQuery = \"SELECT * FROM AntiVirusProduct\"\r\n    try{\r\n    $AntivirusProduct = Get-WmiObject -Namespace \"root\\SecurityCenter2\" -Query $wmiQuery  @psboundparameters -ErrorAction Stop   \r\n    $AV = $AntivirusProduct.displayName         \r\n    if($AV -like $SearchTerm) { \r\n       \r\n        $fehler = 1\r\n        if ($detectAction -eq 1){\r\n            sfehler \"---------- Fehler AV: $detect  gefunden ----------\"\r\n            serrorcode 1 | Out-Null\r\n        }else{\r\n            sfehler \"---------- Warnung AV: $detect  gefunden ----------\"\r\n            serrorcode 3 | Out-Null\r\n        }\r\n        sfehler \"$AV ist auf $computer installiert\"\r\n        \r\n\r\n    } \r\n    else{ \r\n        snormal \"---------- AV: $detect nicht gefunden Alles OK ----------\"\r\n        snormal \"$AV ist auf $computer installiert\"\r\n        $fehler = 0\r\n        serrorcode 0 | Out-Null\r\n\r\n    }\r\n}catch{\r\n    sfehler \"---------- Warnung KEIN AV gefunden ----------\"\r\n    sfehler \"Es ist KEIN AV auf dem $computer installiert\"\r\n    sfehler \"Bitte überprüfen\"\r\n    $fehler = 1\r\n    serrorcode 3 | Out-Null\r\n}\r\n\r\n \r\n######################### Finale Ausgabe #########################\r\n\r\nif ($fehler -gt 0) {\r\n    # Bei Fehler\r\n    wrap -Length $wrapzeichen $Fehlerausgabe\r\n    wrap -Length $wrapzeichen $ausgabe\r\n    $resultstring = sresult\r\n    $exitcode = $global:exitvalue\r\n\r\n}\r\n\r\nelse {\r\n    wrap -Length $wrapzeichen $ausgabe\r\n    \r\n    $resultstring = sresult\r\n    $exitcode = $global:exitvalue\r\n}\r\n\r\n\r\n$result = $exitcode\r\n$bpalert = $exitcode\r\nwrite-host $exitcode\r\nwrite-host $resultstring\r\nexit $exitcode","ExitCodeSuccess":0,"ExitCodeWarning":1002,"ExitCodeError":1001,"IsSelfHeal":false,"SelfHealingScript":null,"SelfHealingExitCodeSuccess":0,"SelfHealingExitCodeError":0,"ThirdPartyIdentifier":null,"ArticleCode":null},"Parameters":[{"ScriptI3D":129,"ParameterName":"$detect","DisplayName":"AV Suchstring (z.B. Kaspersky Antivirus wird nach Wildcard durchsucht)","DefaultValue":"Kaspersky","IsRequired":false,"ValueType":0},{"ScriptI3D":129,"ParameterName":"$detectAction","DisplayName":"Warnung oder Fehler ausgeben (1 = Fehler 2 = Warnung)","DefaultValue":"2","IsRequired":false,"ValueType":0}]}